--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode719w[1..0]	: WIRE;
	w_anode728w[3..0]	: WIRE;
	w_anode745w[3..0]	: WIRE;
	w_anode755w[3..0]	: WIRE;
	w_anode765w[3..0]	: WIRE;
	w_anode775w[3..0]	: WIRE;
	w_anode785w[3..0]	: WIRE;
	w_anode795w[3..0]	: WIRE;
	w_anode805w[3..0]	: WIRE;
	w_anode817w[1..0]	: WIRE;
	w_anode824w[3..0]	: WIRE;
	w_anode835w[3..0]	: WIRE;
	w_anode845w[3..0]	: WIRE;
	w_anode855w[3..0]	: WIRE;
	w_anode865w[3..0]	: WIRE;
	w_anode875w[3..0]	: WIRE;
	w_anode885w[3..0]	: WIRE;
	w_anode895w[3..0]	: WIRE;
	w_data717w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode895w[3..3], w_anode885w[3..3], w_anode875w[3..3], w_anode865w[3..3], w_anode855w[3..3], w_anode845w[3..3], w_anode835w[3..3], w_anode824w[3..3]), ( w_anode805w[3..3], w_anode795w[3..3], w_anode785w[3..3], w_anode775w[3..3], w_anode765w[3..3], w_anode755w[3..3], w_anode745w[3..3], w_anode728w[3..3]));
	w_anode719w[] = ( (w_anode719w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode728w[] = ( (w_anode728w[2..2] & (! w_data717w[2..2])), (w_anode728w[1..1] & (! w_data717w[1..1])), (w_anode728w[0..0] & (! w_data717w[0..0])), w_anode719w[1..1]);
	w_anode745w[] = ( (w_anode745w[2..2] & (! w_data717w[2..2])), (w_anode745w[1..1] & (! w_data717w[1..1])), (w_anode745w[0..0] & w_data717w[0..0]), w_anode719w[1..1]);
	w_anode755w[] = ( (w_anode755w[2..2] & (! w_data717w[2..2])), (w_anode755w[1..1] & w_data717w[1..1]), (w_anode755w[0..0] & (! w_data717w[0..0])), w_anode719w[1..1]);
	w_anode765w[] = ( (w_anode765w[2..2] & (! w_data717w[2..2])), (w_anode765w[1..1] & w_data717w[1..1]), (w_anode765w[0..0] & w_data717w[0..0]), w_anode719w[1..1]);
	w_anode775w[] = ( (w_anode775w[2..2] & w_data717w[2..2]), (w_anode775w[1..1] & (! w_data717w[1..1])), (w_anode775w[0..0] & (! w_data717w[0..0])), w_anode719w[1..1]);
	w_anode785w[] = ( (w_anode785w[2..2] & w_data717w[2..2]), (w_anode785w[1..1] & (! w_data717w[1..1])), (w_anode785w[0..0] & w_data717w[0..0]), w_anode719w[1..1]);
	w_anode795w[] = ( (w_anode795w[2..2] & w_data717w[2..2]), (w_anode795w[1..1] & w_data717w[1..1]), (w_anode795w[0..0] & (! w_data717w[0..0])), w_anode719w[1..1]);
	w_anode805w[] = ( (w_anode805w[2..2] & w_data717w[2..2]), (w_anode805w[1..1] & w_data717w[1..1]), (w_anode805w[0..0] & w_data717w[0..0]), w_anode719w[1..1]);
	w_anode817w[] = ( (w_anode817w[0..0] & data_wire[3..3]), enable_wire);
	w_anode824w[] = ( (w_anode824w[2..2] & (! w_data717w[2..2])), (w_anode824w[1..1] & (! w_data717w[1..1])), (w_anode824w[0..0] & (! w_data717w[0..0])), w_anode817w[1..1]);
	w_anode835w[] = ( (w_anode835w[2..2] & (! w_data717w[2..2])), (w_anode835w[1..1] & (! w_data717w[1..1])), (w_anode835w[0..0] & w_data717w[0..0]), w_anode817w[1..1]);
	w_anode845w[] = ( (w_anode845w[2..2] & (! w_data717w[2..2])), (w_anode845w[1..1] & w_data717w[1..1]), (w_anode845w[0..0] & (! w_data717w[0..0])), w_anode817w[1..1]);
	w_anode855w[] = ( (w_anode855w[2..2] & (! w_data717w[2..2])), (w_anode855w[1..1] & w_data717w[1..1]), (w_anode855w[0..0] & w_data717w[0..0]), w_anode817w[1..1]);
	w_anode865w[] = ( (w_anode865w[2..2] & w_data717w[2..2]), (w_anode865w[1..1] & (! w_data717w[1..1])), (w_anode865w[0..0] & (! w_data717w[0..0])), w_anode817w[1..1]);
	w_anode875w[] = ( (w_anode875w[2..2] & w_data717w[2..2]), (w_anode875w[1..1] & (! w_data717w[1..1])), (w_anode875w[0..0] & w_data717w[0..0]), w_anode817w[1..1]);
	w_anode885w[] = ( (w_anode885w[2..2] & w_data717w[2..2]), (w_anode885w[1..1] & w_data717w[1..1]), (w_anode885w[0..0] & (! w_data717w[0..0])), w_anode817w[1..1]);
	w_anode895w[] = ( (w_anode895w[2..2] & w_data717w[2..2]), (w_anode895w[1..1] & w_data717w[1..1]), (w_anode895w[0..0] & w_data717w[0..0]), w_anode817w[1..1]);
	w_data717w[2..0] = data_wire[2..0];
END;
--VALID FILE
